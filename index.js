const config = require('./config');
const TeleBot = require('telebot');
const bot = new TeleBot(config.settingsBot.botToken);
const mongoose = require('mongoose');
mongoose.connect(config.settingsBot.mongoUrl);
const Schema = mongoose.Schema;
const Schems = config.schems;
const CMD = config.cmd;
const SYS = config.sys;

const UserSchema = new Schema(Schems.user[0]);
const User = mongoose.model('users', UserSchema);

 const DepositsSchema = new Schema(Schems.deposits);
 //const Deposits = mongoose.model('deposits', DepositsSchema);


 const InvoicesSchema = new Schema(Schems.invoices);
// const Invoices = mongoose.model('invoices', InvoicesSchema);

 const PayoutsSchema = new Schema(Schems.payouts);
 //const Payouts = mongoose.model('payouts', PayoutsSchema);


//–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('*', async function(msg){
    console.log(msg)

    // –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    let user = await User.findOne({ user_id: msg.from.id });
    if(!user) {
        // –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        user = await User.create({ 
            user_id: msg.from.id, 
            username: msg.from.username, 
        })
    } 
    
    // //–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
    // var d = new Date();
    // var unix = Math.floor(d.getTime()/1000);// –í—Ä–µ–º—è —ã Unix
    // User.findOneAndUpdate({'user_id':msg.from.id}, {'date_activity': unix},{upsert:true}, function(err, doc){});//–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—Å—Ç–∏
    
    //–†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    let param = await msg.text.split(' ');
    

      // /start
    if(param[0] == '/start'){
        let answer = '';          
        // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –µ—Å—Ç—å
        if(param[1]){       
            // –ï—Å–ª–∏ –Ω–µ—Ç—É —Ä–µ—Ñ –∏–¥ –≤ –±–¥ –∏–ª–∏ —Ä–µ—Ñ –∏–¥ –Ω–µ —Ä–∞–≤–Ω–æ 0
            if(!user.referer_id && user.referer_id != 0){
               
                //  –µ—Å–ª–∏ –Ω–µ—Ç—É —Ä–µ—Ñ–µ—Ä–∞ –≤ –±–¥ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—à–µ–ª –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞ –≤ –±–¥
               User.findOneAndUpdate({'user_id':msg.from.id}, {'referer_id':param[1]},{upsert:true}, async function(err, doc){
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                let Statistics = mongoose.model('statistics', StatisticsSchema);
                let statistics = await Statistics.findOne({ id: 1 })
                let countU = statistics.count_user_day + 1
             
                Statistics.findOneAndUpdate({ id: 1 }, {count_user_day: countU},{upsert:true}, function(err, doc){})
               
            });
            
               answer = '–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ'
            }else if(user.referer_id != 0){
               answer = '–≤—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ '
            }else if(user.referer_id == 0){
                answer = '–≤—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã  –≤—ã –ø—Ä–∏—à–ª–∏ —Å–≤–º–∏'
            }

        } 
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∏ –Ω–µ—Ç—É –≤ –±–¥ —Ä–µ—Ñ –∏–¥ –∏ —Ä–µ—Ñ –∏–¥ –Ω–µ —Ä–∞–≤–Ω–æ 0 —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–∏—à–µ–ª —Å–∞–º
        else if(!user.referer_id && user.referer_id != 0){
            answer = '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n–í—ã –ø—Ä–∏—à–ª–∏ —Å–∞–º–∏'
            // 0 - –ó–Ω–∞—á–∏—Ç —á–µ–ª –ø—Ä–∏—à–µ–ª —Å–∞–º, –º—ã —ç—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
            User.findOneAndUpdate({'user_id':msg.from.id}, {'referer_id': '0'},{upsert:true}, function(err, doc){});

        } else {
            answer = '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n–í—ã –≤–æ–∑—Ä–∞—â–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        }


        let keyboard = bot.keyboard([
            [CMD[1]],
            [CMD[2], CMD[3]],
            [CMD[4], CMD[5]]
        ], {resize: true})
        
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '0'},{upsert:true}, function(err, doc){});
        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }

    




    // /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if(msg.text == CMD[5]){
    
        console.log('created',user.createdAt)
        let count_user = ''
        let userCount = await User.aggregate([
            {  $count :  "count_user"  }
        ])
        .then(function(res){
            console.log(res)
            count_user = res[0].count_user
            
        })
       
        let userCountDay = await User.aggregate([
            {
                $group :{
                    // _id :  {  day :  {  $dayOfYear :  "$ date" },  year :  {  $year :  "$ date"  }  },
                    totalAmount: { $sum: "$ balance"},
                    count: {$sum : 1}

                }
            }
        ])
        .then(function(res){

            console.log(res)
        })
        .catch(function(err){
            console.log(err)
        })
       
        let keyboard = bot.keyboard([
            [CMD[1]],
            [CMD[2], CMD[3]],
            [CMD[4], CMD[5]]
        ], {resize: true})


        let answer = `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${count_user}* \n`;
        // answer += `*–ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞:* ${statistics.count_user_day}\n`
        // answer += `*–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:* ${statistics.invest} —Ä—É–±–ª–µ–π\n`
        // answer += `*–í—ã–ø–ª–∞—á–µ–Ω–æ:* ${statistics.payout} —Ä—É–±–ª–µ–π\n`
        
        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    } 
   
    // –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞
    else if(msg.text == CMD[2]){
        let answer = '';
        if(user.referer_id != 0){var reff = '–í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ';} else if(user.referer_id == 0){var reff = '–í—ã –ø—Ä–∏—à–ª–∏ —Å–∞–º–∏';}
        
        
        answer += `üë§ ${reff}\n\n`;
        answer += `üë• –£ –≤–∞—Å ${user.count_referals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
        answer += `üë• –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.ref_balance} —Ä—É–±\n\n`;
        answer += '–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n' + '```https:/t.me/botinvest2_0_bot?start=' + msg.from.id + '```\n';
        answer += `[–°—Å—ã–ª–∫–∞](https://t.me/botinvest2_0_bot?start=${msg.from.id})`;

        let keyboard = bot.keyboard([
            [CMD[1]],
            [CMD[2], CMD[3]],
            [CMD[4], CMD[5]]
        ], {resize: true})


        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }
    
    //FAQ
    else if(msg.text == CMD[4]){
        
        let keyboard = bot.keyboard([
            [CMD[1]],
            [CMD[2], CMD[3]],
            [CMD[4], CMD[5]]
        ], {resize: true})

        let answer = `*–ö–∞–∫–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞?*\n-–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 30 —Ä—É–±\n\n*–ö–∞–∫–æ–π –¥–æ—Ö–æ–¥ —è –ø–æ–ª—É—á–∞—é?*\n-–í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞\n\n*–ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è?*\n-–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–æ–ª–µ–µ 5 –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n\n*–ö–∞–∫–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã?*\n-–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 15 —Ä—É–±\n\n*–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã–≤–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏?*\n-–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤`;

        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});

    }

    // –ë–∞–ª–∞–Ω—Å
    else if(msg.text == CMD[3]){

        let keyboard = bot.keyboard([
            [CMD[6]],
            [CMD[7]],
            [CMD[8]],
            [CMD[12]]
        ], {resize: true})

        let answer = `–í–∞—à –±–∞–ª–∞–Ω—Å: *${parseFloat(user.balance).toFixed(2)} —Ä—É–±*`;

        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});



    }

    // –í—ã–ø–ª–∞—Ç—ã
    else if(msg.text == CMD[8]){
        
        let Payouts =  mongoose.model('payouts', PayoutsSchema);
    
   
        let payouts = await Payouts.find({user_id: msg.chat.id});
        let count_payouts =  payouts.length
        let answer = ''
        //console.log(count_payouts)
        //console.log(payouts)
        
        if(count_payouts == 0){
            answer = `–£ –≤–∞—Å –µ—â–µ –Ω–µ–±—ã–ª–æ –≤—ã–ø–ª–∞—Ç!`;
        }
        else{
            
            answer = `*–í–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã:*\n`;
            
            payouts.forEach(function(item){
                let status = '';
                
                if(item.status == 0) status = '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ';
                else if(item.status == 1) status = '–≤—ã–ø–ª–∞—á–µ–Ω';
                else if(item.status == 2) status = '–æ—Ç–∫–∞–∑–∞–Ω–æ';

                answer += `–°—É–º–º–∞: *${(item['sum'])} —Ä—É–±*\n`;
                answer += `*${SYS[item['system']]}*\n`;
                answer += `–°—á–µ—Ç: *${item['num']}*\n`;
                answer += `–°—Ç–∞—Ç—É—Å: *${status}*\n\n`;
                
              //console.log(item.sum)
            })
          
        }
      
     
        let keyboard = bot.keyboard([
            [CMD[6]],
            [CMD[7]],
            [CMD[8]],
            [CMD[12]]
        ], {resize: true})

        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }

    // –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É
    else if(msg.text == CMD[7]){
        let answer = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: *50 —Ä—É–±–ª–µ–π*`;
        
        let keyboard = bot.keyboard([
            [CMD[12]]
        ], {resize: true});


        User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '2'},{upsert:true}, function(err, doc){});

        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }

    //–í–∫–ª–∞–¥—ã
    else if(msg.text == CMD[1]){
        let Deposits = mongoose.model('deposits', DepositsSchema);
        let deposits = await Deposits.find({user_id: msg.from.id});
        let answer = ''

        //console.log(deposits)
        if(deposits.length == 0) answer = "–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –≤–∫–ª–∞–¥–æ–≤.";
        else{
            answer += `*–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥—ã:*\n\n`;
            let plan = '';
            let status = ''
            let d, year, month, day, hours, minutes;
            let date_add = '' 
            let date_end = '';
            deposits.forEach(function(item){
                if(item['plan'] == 1) plan = 'START';
                else if(item['plan'] == 2) plan = 'NORMAL';
                else if(item['plan'] == 3) plan = 'PRO';
                else if(item['plan'] == 4) plan = 'SPEED';
                
                if(item.status == 0) status = '—Ä–∞–±–æ—Ç–∞–µ—Ç';
                else if(item.status == 1 ) status = '—É–∂–µ –∑–∞–∫—Ä—ã—Ç';
                
                date_add = transformationUnix(item.date_add)
                date_end = transformationUnix(item.date_end)

                console.log('date_add',date_add)
                console.log('date_end',date_end)

                answer += `üîò –í–∫–ª–∞–¥ –ø–æ —Ç–∞—Ä–∏—Ñ—É *${plan}*:\n`;
                answer += `–î–µ–ø–æ–∑–∏—Ç: *${item['start_sum']} —Ä—É–±*\n`
                answer += `–£–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ: *${item['now_sum']} —Ä—É–±*\n`
                answer += `–°—Ç–∞—Ç—É—Å –≤–∫–ª–∞–¥–∞: *${status}*\n`
                answer += `–í–∫–ª–∞–¥ —Å–¥–µ–ª–∞–Ω: *${date_add.day}.${date_add.month}.${date_add.year}*, –≤ *${date_add.hours}:${date_add.minutes}*\n`
                answer += `–í–∫–ª–∞–¥ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç: *${date_end.day}.${date_end.month}.${date_end.year}*, –≤ *${date_end.hours}:${date_end.minutes}*\n`
                answer += `ID –≤–∫–ª–∞–¥–∞: *${item.id}*\n\n`;

            });
        }
        let keyboard = bot.keyboard([
            [CMD[9]],
            [CMD[10]],
            [CMD[11]],
            [CMD[12]]
        ], {resize: true});

        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }


    // –ù–∞ –≥–ª–∞–≤–Ω—É—é
    else if(msg.text == CMD[12]){
        let answer = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é';
        let keyboard = bot.keyboard([
            [CMD[1]],
            [CMD[2], CMD[3]],
            [CMD[4], CMD[5]]
        ], {resize: true})


        User.findOneAndUpdate({'user_id':msg.from.id}, {'last_out_sum': 0, 'last_out_system': 0, 'section_id': 0},{upsert:true}, function(err, doc){})
        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }

    //–ü–ª–∞–Ω—ã –≤–∫–ª–∞–¥–æ–≤
    else if(msg.text == CMD[10]){
        let plans = config.settingsHolding;
        let paymentDeposit = ''
        let answer = ''
        
        
        answer = `*–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:*\n\n–ü—Ä–æ—Ü–µ–Ω—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –∫ –≤–∞–º –Ω–∞ —Å—á–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n–î–µ–ø–æ–∑–∏—Ç –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤ –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞. \n\n`;
        for(i=1;i<=4;i++){
            let plang = 'plan' + [i];

            if(plans[plang].paymentDeposit == 0){paymentDeposit = '*–Ω–µ –≤—Ö–æ–¥–∏—Ç*';}
            else if(plans[plang].paymentDeposit == 1){paymentDeposit = '*–≤—Ö–æ–¥–∏—Ç*';}
           
            answer += `*–ü–ª–∞–Ω ${plans[plang].name}:*\n`;
            answer += `üîò –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞: *${plans[plang].fromMoney} —Ä—É–±–ª–µ–π*\n`;
            answer += `üîò –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞: *${plans[plang].toMoney} —Ä—É–±–ª–µ–π*\n`;
            answer += `üî∫ –ü—Ä–æ—Ü–µ–Ω—Ç: *${plans[plang].percent}% –≤ —á–∞—Å*\n`;
            answer += `üïö –°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞: *${plans[plang].dayDeposit} –¥–Ω*\n(–¥–µ–ø–æ–∑–∏—Ç ${paymentDeposit} –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—ã)\n\n`;


        }

       

        let keyboard = bot.keyboard([
            [CMD[9]],
            [CMD[10]],
            [CMD[11]],
            [CMD[12]]
        ], {resize: true});

        
        
        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }

    //–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    else if(msg.text == CMD[11]){
        let answer = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥'
        
        let keyboard = bot.keyboard([
            [CMD[12]]
        ], {resize: true});

        
        User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '6'},{upsert:true}, function(err, doc){});
        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});

    }

    else if(msg.text == CMD[9]){
        let answer = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n–ü–ª–∞–Ω –≤–∫–ª–∞–¥–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –î–µ–Ω—å–≥–∏ —Å–ø–∏—à—É—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞. –ü–µ—Ä–µ–¥ —ç—Ç–∏–º –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å.`;
        
        let keyboard = bot.keyboard([
            [CMD[12]]
        ], {resize: true});


        User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '1'},{upsert:true}, function(err, doc){});

        return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
    }

    //–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ section id
    else{

        // –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥
        if(user.section_id == 1){
            let answer = '';
            let keyboard = '';
            let deposit = '';

            if(parseFloat(user.balance) < parseFloat(msg.text)){
                answer = "–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–∞–ª–∞–Ω—Å'.";

                keyboard = bot.keyboard([
                 [CMD[1]],
                 [CMD[2], CMD[3]],
                 [CMD[4], CMD[5]]
                ], {resize: true})
                
               
                User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '0'},{upsert:true}, function(err, doc){});
            }
            
            else if(parseFloat(msg.text) < 30){
                answer = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - 30 —Ä—É–±–ª–µ–π.\n–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É.";

                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  

                

            }

            else if(parseFloat(msg.text) > 25000){
                answer = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - 25000 —Ä—É–±–ª–µ–π.\n–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.";

                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true}); 

               

            }

            // –í—Å–µ –Ω–æ—Ä–º –¥–µ–ª–∞–µ–º –≤–∫–ª–∞–¥
            else {
                let plans = config.settingsHolding;

                let depositD = await create_deposit(msg.chat.id, parseFloat(msg.text));

                User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '0'},{upsert:true}, function(err, doc){});

            }
            
            return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
        }

        // –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏
        else if(user.section_id == 2){

            let answer = '',
                keyboard = ''

            if(parseFloat(user.balance).toFixed(2) < parseFloat(msg.text)) {
                answer = "–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.";

                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  

                return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
            }

            else if(parseFloat(msg.text).toFixed(2) < 50){
                answer = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: 50 —Ä—É–±–ª–µ–π.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.";

                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  

                return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
            }
            
            else{
                answer = '–£–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.'

                keyboard = bot.keyboard([
                    [SYS[0]], 
                    [SYS[1]], 
                    [SYS[2]], 
                    [SYS[3]], 
                    [SYS[4]], 
                    [CMD[12]]

                    
                ], {resize: true});  
                
                
                 User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '3', 'last_out_sum': msg.text},{upsert:true}, function(err, doc){});
                 return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
            }
        }
        
        else if(user.section_id == 3){
            let answer = '',
                keyboard = '';

            if(msg.text == SYS[0] || msg.text == SYS[1] || msg.text == SYS[2] || msg.text == SYS[3] ||  msg.text == SYS[4]){

                let system = '';

                if(msg.text == SYS[0]){
                    system = 0;
                    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–¥–µ–Ω—å–≥–∏\n–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!\n–ü—Ä–∏–º–µ—Ä: *410000000000000*'
                }
                else if(msg.text == SYS[1]){
                    system = 1 
                    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç AdvCash\n–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!\n–ü—Ä–∏–º–µ—Ä: *R123412341234*'
                }
                else if(msg.text == SYS[2]){ 
                    system = 2;
                    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã\n–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!\n–ü—Ä–∏–º–µ—Ä: *278900000000000*'
                }
                else if(msg.text == SYS[3]){ 
                    system = 3;
                    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç Perfect Money\n–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!\n–ü—Ä–∏–º–µ—Ä: *U12345678*'
                }
                else if(msg.text == SYS[4]){ 
                    system = 4;
                    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç Payeer\n–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!\n–ü—Ä–∏–º–µ—Ä: *P12345678*'
                }

               

                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  

                
                User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': '4','last_out_system': system},{upsert:true}, function(err, doc){});
                return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});


            }  

        }

        else if(user.section_id == 4){

            create_payout(msg.chat.id, msg.text)
            
            
            User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': 0,'last_out_sum': 0,'last_out_system': 0},{upsert:true}, function(err, doc){});
            
        }


        // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        else if(user.section_id == 5){
            let answer = '',
                keyboard = '';
            
            if(msg.text <= 0){
                answer = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç."
                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  


                
                User.findOneAndUpdate({'user_id':msg.from.id}, {'section_id': 5},{upsert:true}, function(err, doc){});
                return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
            }

            else{

            let invoices_id = create_invoice(msg.from.id, msg.text);
            let url = ''

            url = "https://free-kassa.ru/merchant/cash.php/Index.aspx";
            url = '';
            url = '';
            url = '';
            url = '';
            }
        }

        //–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        else if(user.section_id == 6){
            let answer = '',
                keyboard = '';


            if(parseFloat(msg.text) < 29){
                answer = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - 30 —Ä—É–±–ª–µ–π.\n–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É.';
                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  

                return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
            }

            else if(parseFloat(msg.text) > 25000){
                answer = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - 25000 —Ä—É–±–ª–µ–π.\n–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.';
                keyboard = bot.keyboard([
                    [CMD[12]]
                ], {resize: true});  

                return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
            }

            else if(parseFloat(msg.text) >= 30 && parseFloat(msg.text) < 25000){
                let plan = ''
                let pay = ''
                let pay1 = ''
                let pay2 = ''
                let pay3 = ''
                let n = parseFloat(msg.text)
                let percent = '',
                percentH = '',
                percentD = '',
                aerrors = '',
                parcentDays = '';
                let plans = config.settingsHolding;
                let information = '',
                    paymentDeposit = '',
                    dayDeposit = '',
                    msgPaymentDeposit = '',
                    clearPercent = '';
                
                    // –ü–ª–∞–Ω 1
                if(parseFloat(msg.text) >= parseFloat(plans.plan1.fromMoney) && parseFloat(msg.text) <= parseFloat(plans.plan1.toMoney)){

                  
                  information = plans.plan1; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ 1
                    plan = information.name; //–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
                    percent = information.percent; // –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    paymentDeposit = information.paymentDeposit; //// –¥–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç–Ω—ã –∏–ª–∏ –Ω–µ—Ç
                    dayDeposit = information.dayDeposit; // —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç


                    percentH = percent / 100; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    percentD = percentH * 24; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –î–µ–Ω—å
                    percentDays = percentD * information.dayDeposit; // –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ n –¥–Ω—è
                  

                    pay = parseFloat(n * percentH).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —á–∞—Å
                    pay1 = parseFloat(n * (percentD)).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                    
                    if(paymentDeposit == 0){ // –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n * percentDays).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                    }
                    else if(paymentDeposit == 1){ // –î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n + (n * percentDays)).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                        
                    }
                    
                    clearPercent = (pay2 * 100) / n;
                    //console.log(n)

                    answer += `*–ü–ª–∞–Ω: ${plan}*\n\n`;
                    answer += `–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: *${n.toFixed(2)} —Ä—É–±*\n`;
                    answer += `–ö–∞–∂–¥—ã–π —á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å: *${pay} —Ä—É–±* (${parseFloat(percent).toFixed(2)}%)\n`;
                    answer += `–ó–∞ 24 —á –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: *${pay1} —Ä—É–±* (${(percent * 24).toFixed(2)}%)\n`;
                    answer += `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ ${information.dayDeposit} –¥–Ω: *${pay2} —Ä—É–±* (${clearPercent.toFixed(2)}%)\n\n(${msgPaymentDeposit})\n`;
                    answer += `–í–µ—Ä–Ω–µ—Ç—Å—è –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å: *${pay3} —Ä—É–±* (${((pay3 * 100) / n).toFixed(2)}%)\n`;
                    

                   
                }

                // –ü–ª–∞–Ω 2
                else if(parseFloat(msg.text) >= parseFloat(plans.plan2.fromMoney) && parseFloat(msg.text) <= parseFloat(plans.plan2.toMoney)){
                    
                    information = plans.plan2; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ 1
                    plan = information.name; //–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
                    percent = information.percent; // –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    paymentDeposit = information.paymentDeposit; //// –¥–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç–Ω—ã –∏–ª–∏ –Ω–µ—Ç
                    dayDeposit = information.dayDeposit; // —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç


                    percentH = percent / 100; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    percentD = percentH * 24; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –î–µ–Ω—å
                    percentDays = percentD * information.dayDeposit; // –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ n –¥–Ω—è
                  

                    pay = parseFloat(n * percentH).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —á–∞—Å
                    pay1 = parseFloat(n * (percentD)).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                    
                    if(paymentDeposit == 0){ // –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n * percentDays).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                    }
                    else if(paymentDeposit == 1){ // –î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n + (n * percentDays)).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                        
                    }
                    
                    clearPercent = (pay2 * 100) / n;
                    //console.log(n)

                    answer += `*–ü–ª–∞–Ω: ${plan}*\n\n`;
                    answer += `–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: *${n.toFixed(2)} —Ä—É–±*\n`;
                    answer += `–ö–∞–∂–¥—ã–π —á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å: *${pay} —Ä—É–±* (${parseFloat(percent).toFixed(2)}%)\n`;
                    answer += `–ó–∞ 24 —á –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: *${pay1} —Ä—É–±* (${(percent * 24).toFixed(2)}%)\n`;
                    answer += `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ ${information.dayDeposit} –¥–Ω: *${pay2} —Ä—É–±* (${clearPercent.toFixed(2)}%)\n\n(${msgPaymentDeposit})\n`;
                    answer += `–í–µ—Ä–Ω–µ—Ç—Å—è –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å: *${pay3} —Ä—É–±* (${((pay3 * 100) / n).toFixed(2)}%)\n`;
                    

                 
                }

                // –ü–ª–∞–Ω 3
                else if(parseFloat(msg.text) >= parseFloat(plans.plan3.fromMoney) && parseFloat(msg.text) <= parseFloat(plans.plan3.toMoney)){

                    information = plans.plan3; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ 1
                    plan = information.name; //–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
                    percent = information.percent; // –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    paymentDeposit = information.paymentDeposit; //// –¥–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç–Ω—ã –∏–ª–∏ –Ω–µ—Ç
                    dayDeposit = information.dayDeposit; // —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç


                    percentH = percent / 100; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    percentD = percentH * 24; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –î–µ–Ω—å
                    percentDays = percentD * information.dayDeposit; // –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ n –¥–Ω—è
                  

                    pay = parseFloat(n * percentH).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —á–∞—Å
                    pay1 = parseFloat(n * (percentD)).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                    
                    if(paymentDeposit == 0){ // –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n * percentDays).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                    }
                    else if(paymentDeposit == 1){ // –î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n + (n * percentDays)).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                        
                    }
                    
                    clearPercent = (pay2 * 100) / n;
                    //console.log(n)

                    answer += `*–ü–ª–∞–Ω: ${plan}*\n\n`;
                    answer += `–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: *${n.toFixed(2)} —Ä—É–±*\n`;
                    answer += `–ö–∞–∂–¥—ã–π —á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å: *${pay} —Ä—É–±* (${parseFloat(percent).toFixed(2)}%)\n`;
                    answer += `–ó–∞ 24 —á –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: *${pay1} —Ä—É–±* (${(percent * 24).toFixed(2)}%)\n`;
                    answer += `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ ${information.dayDeposit} –¥–Ω: *${pay2} —Ä—É–±* (${clearPercent.toFixed(2)}%)\n\n(${msgPaymentDeposit})\n`;
                    answer += `–í–µ—Ä–Ω–µ—Ç—Å—è –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å: *${pay3} —Ä—É–±* (${((pay3 * 100) / n).toFixed(2)}%)\n`;
                    

                    

                }


                // –ü–ª–∞–Ω 4
                else if(parseFloat(msg.text) >= parseFloat(plans.plan4.fromMoney) && parseFloat(msg.text) <= parseFloat(plans.plan4.toMoney)){

                    information = plans.plan4; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ 1
                    plan = information.name; //–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
                    percent = information.percent; // –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    paymentDeposit = information.paymentDeposit; //// –¥–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç–Ω—ã –∏–ª–∏ –Ω–µ—Ç
                    dayDeposit = information.dayDeposit; // —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç


                    percentH = percent / 100; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —á–∞—Å
                    percentD = percentH * 24; // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –î–µ–Ω—å
                    percentDays = percentD * information.dayDeposit; // –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ n –¥–Ω—è
                  

                    pay = parseFloat(n * percentH).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —á–∞—Å
                    pay1 = parseFloat(n * (percentD)).toFixed(2) // –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                    
                    if(paymentDeposit == 0){ // –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n * percentDays).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                    }
                    else if(paymentDeposit == 1){ // –î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É
                        pay3 = parseFloat(n + (n * percentDays)).toFixed(2) // —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                        pay2 = parseFloat(pay3 - n).toFixed(2) // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                        
                        msgPaymentDeposit = `–î–µ–ø–æ–∑–∏—Ç –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–ø–ª–∞—Ç—É`;
                        
                    }
                    
                    clearPercent = (pay2 * 100) / n;
                    //console.log(n)

                    answer += `*–ü–ª–∞–Ω: ${plan}*\n\n`;
                    answer += `–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: *${n.toFixed(2)} —Ä—É–±*\n`;
                    answer += `–ö–∞–∂–¥—ã–π —á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å: *${pay} —Ä—É–±* (${parseFloat(percent).toFixed(2)}%)\n`;
                    answer += `–ó–∞ 24 —á –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: *${pay1} —Ä—É–±* (${(percent * 24).toFixed(2)}%)\n`;
                    answer += `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ ${information.dayDeposit} –¥–Ω: *${pay2} —Ä—É–±* (${clearPercent.toFixed(2)}%)\n\n(${msgPaymentDeposit})\n`;
                    answer += `–í–µ—Ä–Ω–µ—Ç—Å—è –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å: *${pay3} —Ä—É–±* (${((pay3 * 100) / n).toFixed(2)}%)\n`;
                    
 
                } 
            } 
            
            //—ç—Ç–æ –∫–æ–≥–¥–∞ —á–µ–ª –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ
            else {
                answer = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!';
            }

            keyboard = bot.keyboard([
                [CMD[12]]
            
             ], {resize: true})

            return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});


        } 
        
        // –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å –Ω–µ –≤ –æ–¥–Ω–æ–º section id –∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞
        else {

            answer = `–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞\n–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`;

            let keyboard = bot.keyboard([
                [CMD[1]],
                [CMD[2], CMD[3]],
                [CMD[4], CMD[5]]
            ], {resize: true})


            return bot.sendMessage(msg.chat.id, answer, {parseMode: 'Markdown', replyMarkup: keyboard});
        }


    
    } 
    
   

    
    
    
 
})
bot.start()


/*async function create_invoice(user_id, sum) {

    invoice = await Invoice.create({ 
    user_id: user_id, 
    sum: sum 
    })
    return invoices;
}*/

async function create_deposit(user_id, sum) {
     let Deposits = mongoose.model('deposits', DepositsSchema);
     let plans = config.settingsHolding;
     let answer = ''
     let datas = ''
     let user = await User.findOne({ user_id: user_id });
     let plan = '',
        days = '',
        user_date,
        user_balance = '',
        dayDeposit = '',
        user_new_balance = '',
        d = new Date(),
        date_add = '',
        date_end = ''
    if(parseFloat(sum) >= parseFloat(plans.plan1.fromMoney) && parseFloat(sum) <= parseFloat(plans.plan1.toMoney)) {
        plan = 1;
        days = plans.plan1.dayDeposit;
    }
    else if(parseFloat(sum) >= parseFloat(plans.plan2.fromMoney) && parseFloat(sum) <= parseFloat(plans.plan2.toMoney)) {
        plan = 2;
        days = plans.plan2.dayDeposit;
    }
    else if(parseFloat(sum) >= parseFloat(plans.plan3.fromMoney) && parseFloat(sum) <= parseFloat(plans.plan3.toMoney)) {
        plan = 3;
        days = plans.plan3.dayDeposit;
    }
    else if(parseFloat(sum) >= parseFloat(plans.plan4.fromMoney) && parseFloat(sum) <= parseFloat(plans.plan4.toMoney)) {
        plan = 4;
        days = plans.plan3.dayDeposit;
    }
    
    if(plan == 1){  dayDeposit = plans.plan1.dayDeposit;}
     else if(plan == 2) {dayDeposit = plans.plan2.dayDeposit;}
     else if(plan == 3) {dayDeposit = plans.plan3.dayDeposit;}
     else if(plan == 4) {dayDeposit = plans.plan4.dayDeposit;}


     let unix = Math.floor(d.getTime()/1000);

     let  data_end = await unix + (dayDeposit * 86400)
 
     user_new_balance = user.balance - sum


     let keyboard =''
     let deposits = await Deposits.find({})

        countDeposits = deposits.length
        let id = countDeposits + 1

        let response = '';
        deposits = await new Deposits({
            id: id,
            user_id: user_id,
            start_sum: sum.toFixed(2),
            status: 0,
            now_sum: 0,
            plan: plan,
            date_add: unix,
            date_end: data_end,
        })
        
        deposits.save().then(async function(res){
             if(res){
            datas = res;
        
            //console.log('datas',datas.id)
            //console.log('err',err)
            await User.findOneAndUpdate({'user_id':user_id}, {'balance': user_new_balance});
           
            
            let plan1 = ''

      
            answer = "üîò –í–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n";
                 if(datas['plan'] == 1) plan1 = plans.plan1.name;
               	     else if(datas['plan'] == 2) plan1 = plans.plan2.name;
               	     else if(datas['plan'] == 3) plan1 = plans.plan3.name;
               	     else if(datas['plan'] == 4) plan1 = plans.plan4.name;

                date_add = transformationUnix(datas.date_add)
                date_end = transformationUnix(datas.date_end)

                 answer += `–ü–ª–∞–Ω: *${plan1}*\n`;
                 answer += `–î–µ–ø–æ–∑–∏—Ç: *${datas.start_sum}*\n`;
                 answer += `–í–∫–ª–∞–¥ —Å–¥–µ–ª–∞–Ω: *${date_add.day}.${date_add.month}.${date_add.year}*, –≤ *${date_add.hours}:${date_add.minutes}*\n`
                 answer += `–í–∫–ª–∞–¥ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç: *${date_end.day}.${date_end.month}.${date_end.year}*, –≤ *${date_end.hours}:${date_end.minutes}*\n`
                 answer += `ID –≤–∫–ª–∞–¥–∞: *${datas.id}*\n`
                  keyboard = bot.keyboard([
                    [CMD[1]],
                    [CMD[2], CMD[3]],
                    [CMD[4], CMD[5]]
                ], {resize: true})

            }

            // –µ—Å–ª–∏ –±–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞
            else {

            }

                
            return bot.sendMessage(user_id, answer, {parseMode: 'Markdown', replyMarkup: keyboard} );

        });


        


}

function transformationUnix(unix){
    let d, year, month, day, hours, minutes;
    d = new Date((unix * 1000));
    
    year = d.getFullYear();
    month = d.getMonth();
    day = d.getDate();
    hours = d.getHours();
    minutes = d.getMinutes();

    if(minutes < 10) minutes = '0' + minutes;
    if(month < 10) month = '0' + month;
    if(day < 10) day = '0' + day;
    if(hours < 10) hours = '0' + hours;

    return {
        year: year,
        month: month ,
        day: day,
        hours: hours,
        minutes: minutes
    };
 }

 async function create_payout(user_id, num) {
    let user = await User.findOne({ user_id: user_id }); 
    let Payouts = mongoose.model('payouts', PayoutsSchema);
    let answer = '',
        keyboard = ''

    let payouts = await Payouts.find({})

        let countPayouts = payouts.length
        let id = countPayouts + 1



    await User.findOneAndUpdate({'user_id':user_id}, {'balance': `${user.balance - user.last_out_sum.toFixed(2)}`});
    

    let payouts1 = await new Payouts({
        id: id,
        user_id: user_id,
        sum: user.last_out_sum.toFixed(2),
        system: user.last_out_system.toFixed(2),
        num: num,
        status: 0,
        
    })

    payouts1.save().then(function(res){
         if(res){

            answer += `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n`;
            answer += `ID –∑–∞—è–≤–∫–∏: *${res.id}*\n`;
            answer += `–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: *${res.sum}*\n`;
            answer += `–°–∏—Å—Ç–µ–º–∞: *${SYS[res.system]}*\n`;
            answer += `–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: *${res.num}*\n`;

           keyboard = bot.keyboard([
            [CMD[1]],
            [CMD[2], CMD[3]],
            [CMD[4], CMD[5]]
           ], {resize: true})

          //console.log(res)

        }

        return bot.sendMessage(user_id, answer, {parseMode: 'Markdown', replyMarkup: keyboard} );
        
    });
 

    

}