const config = require('./config');
const TeleBot = require('telebot');
const bot = new TeleBot(config.settingsBot.botToken);
const mongoose = require('mongoose');
mongoose.connect(config.settingsBot.mongoUrl);
const Schema = mongoose.Schema;
const Schems = config.schems;

const UserSchema = new Schema(Schems.user);
const User = mongoose.model('users', UserSchema);

const DepositsSchema = new Schema(Schems.deposits);
const Deposits = mongoose.model('deposits', DepositsSchema);

const StatisticsSchema = new Schema(Schems.statistics);
const Statistics = mongoose.model('statistics', StatisticsSchema);

const InvoicesSchema = new Schema(Schems.invoices);
const Invoices = mongoose.model('invoices', InvoicesSchema);

const PayoutsSchema = new Schema(Schems.payoutss);
const Payouts = mongoose.model('payouts', PayoutsSchema);





bot.on('*', async function(msg) {
    var message = msg.text,
        user_id = msg.from.id,
        username = msg.from.username,
        first_name = msg.from.first_name,
        last_name = msg.from.last_name

    // –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    let user = await User.findOne({ user_id: msg.from.id });
 
    var d = new Date();
    var unix = Math.floor(d.getTime()/1000);
    User.findOneAndUpdate({'user_id':msg.from.id}, {'date_activity': unix},{upsert:true}, function(err, doc){});//–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞

    //console.log('user', user)
console.log(user)
if (!user) {
    // –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
     user = await User.create({ 
         user_id: chat_id, 
         username: username, 
        })
     } 


  // return bot.sendMessage(msg.from.id, `–í–∞—à –±–∞–ª–∞–Ω—Å : ${user.balance} —Ä—É–±`)
 //console.log(msg);
    let param = await msg.text.split(' ');
 
    
    if(param[0] == '/start'){
     let answer
        
        if(param[1]){
            //let isUser = await User.findOne({ id: msg.from.id });
            if(!user.ref_id){
            //  –µ—Å–ª–∏ –Ω–µ—Ç—É —Ä–µ—Ñ–µ—Ä–∞ –≤ –±–¥ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—à–µ–ª –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞ –≤ –±–¥
            User.findOneAndUpdate({'id':msg.from.id}, {'ref_id':param[1]},{upsert:true}, function(err, doc){});//–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞
            console.log(param + ' –∑–∞–ø–∏—Å–∞–ª–∏ –∏–¥')
            answer = '–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ'
            }else {
                answer = '–≤—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
            }
        

        } else {
            answer = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥ –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç—ã'
            
        
            //console.log(param + ' –Ω–µ—Ç—É —Ä–µ—Ñ–µ—Ä–∞')
        }
        //let answer = '–ó–¥–∞—Ä–æ–≤–∞' + user.dir['menu'].sections;
    
     return bot.sendMessage(msg.from.id, answer, {parseMode: 'Markdown', replyMarkup: RM_default});
    }

switch(msg.text){
    case '‚òÅ FAQ':{
     let answer = '–¢—É—Ç FAQ' + ' –¢–≤–æ–π username: ' + username + '';
      return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_default});
    break;}
     
    case 'üíµ –ë–∞–ª–∞–Ω—Å':{
      
       let message = '*–í–∞—à –±–∞–ª–∞–Ω—Å:* ' + String(user.balance) + ' —Ä—É–±';
      
      return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_ballance});
    break;}
     
     
    case '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':{
        let message = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é';
      return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_default});
    break;}

   
    case 'üî∞ –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞':{
        let message = `*–í—ã –ø—Ä–∏–≤–µ–ª–∏:* 0 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n*–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* 0 —Ä—É–±–ª–µ–π\n\n*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* https://t.me/toorboiinvest_bot?start=1\n\n–ò–ª–∏ [–°—Å—ã–ª–∫–∞](https://t.me/toorboiinvest_bot?start=1)\n\n–û—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å *10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å—É–º–º—ã*.`;
        return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_default})
    break;}
  
     
    case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':{

        
        let statistics = await Statistics.findOne({ id: 1 });
        let message = `*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${statistics.count_user} \n*–ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞:* ${statistics.count_user_day}\n*–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:* ${statistics.invest} —Ä—É–±–ª–µ–π\n*–í—ã–ø–ª–∞—á–µ–Ω–æ:* ${statistics.payout} —Ä—É–±–ª–µ–π\n`;
      return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_default});
    break;}
  

    case 'üí≥ –í–∫–ª–∞–¥—ã':{
     let message = '–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥—ã:\nüîò –í–∫–ª–∞–¥ –ø–æ —Ç–∞—Ä–∏—Ñ—É *Start*:\n*–î–µ–ø–æ–∑–∏—Ç:* 100.00 —Ä—É–±\n*–ù–∞–∫–æ–ø–∏–≤—à–∞—è—Å—è —Å—É–º–º–∞:* 110.00 —Ä—É–±\n–í–∫–ª–∞–¥ —Å–¥–µ–ª–∞–Ω —Å–µ–≥–æ–¥–Ω—è –≤ 11:12\n–í–∫–ª–∞–¥ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 11:12\n';
      return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_holding});
    break;}
  
    case 'üìÜ –ú–æ–∏ –≤—ã–ø–ª–∞—Ç—ã':{
     let message = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤—ã–ø–ª–∞—Ç—ã:\n\n*1.* 12.06.2018\n*–°—É–º–º–∞:* 32.50\n*–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã:* –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n';
      return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_ballance});
    break;}

    default:{
        let message = '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç!\n–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' + user.dir
         
         let str = user.dir;
         
         //console.log(user.dir);


   
        return bot.sendMessage(msg.from.id, message, {parseMode: 'Markdown', replyMarkup: RM_default});
        break;
    }
}
});




bot.start();

const RM_default = bot.keyboard([
    ['üé≤ –ò–≥—Ä–∞—Ç—å'],
    ['üìú –ü—Ä–∞–≤–∏–ª–∞', 'üíµ –ë–∞–ª–∞–Ω—Å'],
    ['‚òÅ FAQ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
], {resize: true});

const RM_ballance = bot.keyboard([
    ['üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
    ['üì§ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É'],
    ['üìÜ –ú–æ–∏ –≤—ã–ø–ª–∞—Ç—ã'],
    ['‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
], {resize: true});